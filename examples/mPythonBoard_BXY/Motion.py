# MindPlus# mpythonimport timefrom Sengo2 import *from mpython import *from machine import UARTuart1 = UART(1, baudrate=57600, tx=Pin.P14, rx=Pin.P13)sengo2 = Sengo2(0x60)brightness=9# 自定义函数def UART():  global my_variable, x, y  sengo2.begin(uart1)def I2C():  global my_variable, x, y  sengo2.begin(i2c)def Result_Display():  global my_variable, x, y  # Sengo2不主动返回检测识别结果，需要主控板发送指令进行读取。读取的流程：首先读取识别结果的数量，接收到指令后，Sengo2会刷新结果数据，如果结果数量不为零，那么主控再发送指令读取结果的相关信息。请务必按此流程构建程序。  if ((sengo2.GetValue(sengo2_vision_e.kVisionMotionDetect, sentry_obj_info_e.kStatus)) > 0):    rgb[1] = (255*brightness//9, 0*brightness//9, 0*brightness//9)    rgb.write()    # 因为只能够检测1个运动物体，所以只需读取结果1的信息    x = (round(((sengo2.GetValue(sengo2_vision_e.kVisionMotionDetect,sentry_obj_info_e.kXValue,1)) * 1.24)))    # 结果的w与h值为固定值，无实际意义，故无需读取    y = (round(((sengo2.GetValue(sengo2_vision_e.kVisionMotionDetect,sentry_obj_info_e.kYValue,1)) * 0.64)))    oled.rect(x,y,4,4,1)    oled.show()    time.sleep(0.1)    oled.rect(x,y,4,4,0)    oled.show()    rgb[1] = (0*brightness//9, 0*brightness//9, 0*brightness//9)    rgb.write()    time.sleep(0.1)x = 0y = 0# 等待Sengo2完成初始化，此延时不可去掉，避免出现Sengo2尚未初始化完毕主控板已经发送指令的情况time.sleep(2)I2C()# Sengo2同一时间只能检测一个运动物体sengo2.VisionBegin(sengo2_vision_e.kVisionMotionDetect)rgb[1] = (51*brightness//9, 204*brightness//9, 0*brightness//9)rgb.write()while True:  Result_Display()