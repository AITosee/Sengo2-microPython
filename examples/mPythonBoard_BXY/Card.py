import timefrom Sengo2 import *from mpython import *from machine import UARTuart1 = UART(1, baudrate=57600, tx=Pin.P14, rx=Pin.P13)sengo2 = Sengo2(0x60)brightness=9# 自定义函数def UART():  global my_variable, i, Start, angle, num  sengo2.begin(uart1)def I2C():  global my_variable, i, Start, angle, num  sengo2.begin(i2c)def GreenLight():  global my_variable, i, Start, angle, num  oled.DispChar("Green Light", 0, (2-1)*16, 1)def Result_Display():  global my_variable, i, Start, angle, num  # Sengo2不主动返回检测识别结果，需要主控板发送指令进行读取。读取的流程：首先读取识别结果的数量，接收到指令后，Sengo2会刷新结果数据，如果结果数量不为零，那么主控再发送指令读取结果的相关信息。请务必按此流程构建程序。  num = (sengo2.GetValue(sengo2_vision_e.kVisionCard, sentry_obj_info_e.kStatus))  i = 1  for index in range(num):    if (sengo2.GetValue(sengo2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sengo2_card_label_e.kCardForward):      Forward()    if (sengo2.GetValue(sengo2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sengo2_card_label_e.kCardLeft):      Left()    if (sengo2.GetValue(sengo2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sengo2_card_label_e.kCardRight):      Right()    if (sengo2.GetValue(sengo2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sengo2_card_label_e.kCardTurnAround):      Turn_Around()    if (sengo2.GetValue(sengo2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)==sengo2_card_label_e.kCardPark):      Park()    if ((sengo2.GetValue(sengo2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)) == 6):      GreenLight()    if ((sengo2.GetValue(sengo2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)) == 7):      RedLight()    if ((sengo2.GetValue(sengo2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)) == 8):      Speed40()    if ((sengo2.GetValue(sengo2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)) == 9):      Speed60()    if ((sengo2.GetValue(sengo2_vision_e.kVisionCard,sentry_obj_info_e.kLabel,i)) == 10):      Speed80()    oled.DispChar((str("x=") + str((sengo2.GetValue(sengo2_vision_e.kVisionCard,sentry_obj_info_e.kXValue,i)))), 0, 32, 1)    oled.DispChar((str("y=") + str((sengo2.GetValue(sengo2_vision_e.kVisionCard,sentry_obj_info_e.kYValue,i)))), 64, 32, 1)    oled.DispChar((str("w=") + str((sengo2.GetValue(sengo2_vision_e.kVisionCard,sentry_obj_info_e.kWidthValue,i)))), 0, 48, 1)    oled.DispChar((str("h=") + str((sengo2.GetValue(sengo2_vision_e.kVisionCard,sentry_obj_info_e.kHeightValue,i)))), 64, 48, 1)    oled.show()    time.sleep(0.2)    oled.fill_rect(0, (2-1)*16, 128, 16, 0)    oled.fill_rect(0, (3-1)*16, 128, 16, 0)    oled.fill_rect(0, (4-1)*16, 128, 16, 0)    oled.show()    i = (i + 1)def RedLight():  global my_variable, i, Start, angle, num  oled.DispChar("Red Light", 0, (2-1)*16, 1)def Speed40():  global my_variable, i, Start, angle, num  oled.DispChar("Speed 40", 0, (2-1)*16, 1)def Speed60():  global my_variable, i, Start, angle, num  oled.DispChar("Speed 60", 0, (2-1)*16, 1)def Speed80():  global my_variable, i, Start, angle, num  oled.DispChar("Speed 80", 0, (2-1)*16, 1)def Forward():  global my_variable, i, Start, angle, num  oled.DispChar("Go Straight", 0, (2-1)*16, 1)def Left():  global my_variable, i, Start, angle, num  oled.DispChar("Left", 0, (2-1)*16, 1)def Right():  global my_variable, i, Start, angle, num  oled.DispChar("Right", 0, (2-1)*16, 1)def Turn_Around():  global my_variable, i, Start, angle, num  oled.DispChar("Turn Around", 0, (2-1)*16, 1)def Park():  global my_variable, i, Start, angle, num  oled.DispChar("Park", 0, (2-1)*16, 1)num = 0i = 0# 等待Sengo2完成初始化，此延时不可省略time.sleep(2)I2C()sengo2.VisionBegin(sengo2_vision_e.kVisionCard)oled.DispChar("Algo:Card", 0, (1-1)*16, 1)oled.show()while True:  rgb[1] = (0*brightness//9, 0*brightness//9, 255*brightness//9)  rgb.write()  Result_Display()  rgb[1] = (0*brightness//9, 0*brightness//9, 0*brightness//9)  rgb.write()  time.sleep(0.2)